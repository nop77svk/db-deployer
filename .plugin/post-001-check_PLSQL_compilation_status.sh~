#!/bin/bash
set -o errexit
set -o errtrace
set -o functrace
set -o pipefail
set -o nounset
[ -n "${DEBUG:-}" ] && set -x # xtrace

# -------------------------------------------------------------------------------------------------

TargetsToCheck=( bimp bimp_appl )

InfoMessage "        Autochecking PLSQL codebase for compilation errors"
cd "${ScriptPath}"

cat > "${TmpPath}/${gx_Env}.autocheck_plsql.${RndToken}.sql" <<-EOF
	whenever sqlerror exit 1 rollback
	whenever oserror exit 2 rollback

	set autoprint off
	set autotrace off
	set echo off
	set define off
	set feedback on
	set heading off
	set headsep off
	set linesize 2048
	set newpage none
	set recsep off
	set serveroutput on size unlimited format word_wrapped
	set tab on
	set termout off
	set trimout on
	set trimspool on
	set verify off
	set wrap off

	set exitcommit off

EOF

spoolFile="${g_LogFolder}/${gx_Env}.autocheck_plsql.${RndToken}.log"
spoolFileWin=$( PathUnixToWin "${spoolFile}" )
echo "spool \"${spoolFileWin}\"" >> "${TmpPath}/${gx_Env}.autocheck_plsql.${RndToken}.sql"

cat >> "${TmpPath}/${gx_Env}.autocheck_plsql.${RndToken}.sql" <<-EOF
	prompt --- recompiling schema
	exec phr_utl_deploy.recompile_schema();

	show errors

	prompt --- checking PLSQL code status
	exec phr_utl_deploy.check_plsql_status();

	prompt --- setting the broken mview refresh jobs to work again

	begin
	    for cv in (
	        select job, last_date, next_date, broken, failures, what
	        from user_jobs
	        where lower(what) like '%dbms!_refresh.refresh%' escape '!'
	            and ( next_date >= sysdate + 2 or lnnvl(broken = 'N') )
	    ) loop
	        dbms_job.broken(
	            job => cv.job,
	            broken => false
	        );
	        dbms_output.put_line('job #'||cv.job||' unbroken OK');
	    end loop;
	end;
	/

	exit success
EOF

for l_target in ${TargetsToCheck[@]} ; do
	InfoMessage "            processing target \"${l_target}\""

	tech-oracle-get_connect_string l_connect "${l_target}"
	tech-oracle-get_connect_string l_connect_obfuscated "${l_target}" obfuscate-password

	DoLog "                target credentials = \"${l_connect_obfuscated}\""

	l_sqlplus_script_file=$( PathUnixToWin "${TmpPath}/${gx_Env}.autocheck_plsql.${RndToken}.sql" )
	"${SqlPlusBinary}" -L -S "${l_connect}" @"${l_sqlplus_script_file}" "${l_target}" \
		|| ThrowException "SQL*Plus failed"

	spoolFileTargeted="${g_LogFolder}/${gx_Env}.autocheck_plsql.${l_target}.${RndToken}.log"
	mv -f "${spoolFile}" "${spoolFileTargeted}"
done

[ -z "${DEBUG:-}" ] || true && (
	rm "${TmpPath}/${gx_Env}.autocheck_plsql.${RndToken}.sql"
)
